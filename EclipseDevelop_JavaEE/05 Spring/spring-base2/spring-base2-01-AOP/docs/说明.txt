提示：
	Spring框架,如果类实现了接口,就使用JDK的动态代理生成代理对象,如果这个类没有实现任何接口,使用CGLIB生成代理对象.

<!-- ====================================================================== -->
1、	什么是AOP:
		 AOP Aspect Oriented Programing 面向切面编程
		 AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码（性能监视、事务管理、安全检查、缓存）
		 Spring AOP使用纯Java实现，不需要专门的编译过程和类加载器，在运行期通过代理方式向目标类织入增强代码
		 AspecJ是一个基于Java语言的AOP框架，Spring2.0开始，Spring AOP引入对Aspect的支持，AspectJ扩展了Java语言，提供了一个专门的编译器，在编译时提供横向代码的织入

<!-- ====================================================================== -->		 
2、	AOP底层原理;
		就是代理机制:
		* 动态代理:(JDK中使用)
		* JDK的动态代理,对实现了接口的类生成代理.

<!-- ====================================================================== -->
3、	Spring的AOP代理:
		JDK动态代理:对实现了接口的类生成代理
		CGLib代理机制:对类生成代理

<!-- ====================================================================== -->		
4、	AOP的术语:
		Joinpoint(连接点):所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法,因为spring只支持方法类型的连接点.
		Pointcut(切入点):所谓切入点是指我们要对哪些Joinpoint进行拦截的定义.
		Advice(通知/增强):所谓通知是指拦截到Joinpoint之后所要做的事情就是通知.通知分为前置通知,后置通知,异常通知,最终通知,环绕通知(切面要完成的功能)
		Introduction(引介):引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field.
		Target(目标对象):代理的目标对象
		Weaving(织入):是指把增强应用到目标对象来创建新的代理对象的过程.
			spring采用动态代理织入，而AspectJ采用编译期织入和类装在期织入
		Proxy（代理）:一个类被AOP织入增强后，就产生一个结果代理类
		Aspect(切面): 是切入点和通知（引介）的结合
		
<!-- ====================================================================== -->		
5、Spring的传统AOP
		AOP:不是由Spring定义.AOP联盟的组织定义.
		Spring中的通知:(增强代码)
				前置通知 org.springframework.aop.MethodBeforeAdvice
							* 在目标方法执行前实施增强
				后置通知 org.springframework.aop.AfterReturningAdvice
							* 在目标方法执行后实施增强
				环绕通知 org.aopalliance.intercept.MethodInterceptor
							* 在目标方法执行前后实施增强
				异常抛出通知 org.springframework.aop.ThrowsAdvice
							* 在方法抛出异常后实施增强
				引介通知 org.springframework.aop.IntroductionInterceptor(课程不讲.)
							* 在目标类中添加一些新的方法和属性
							
<!-- ====================================================================== -->	
6、Spring中的切面类型:
		Advisor : Spring中传统切面.
			* Advisor:都是有一个切点和一个通知组合.
			* Aspect:多个切点和多个通知组合.

		Advisor : 代表一般切面，Advice本身就是一个切面，对目标类所有方法进行拦截(* 不带有切点的切面.针对所有方法进行拦截)
		PointcutAdvisor : 代表具有切点的切面，可以指定拦截目标类哪些方法(带有切点的切面,针对某个方法进行拦截)
		IntroductionAdvisor : 代表引介切面，针对引介通知而使用切面（不要求掌握）

<!-- ====================================================================== -->			
7、spring提供自动代理:
			如果每个代理都是通过ProxyFactoryBean织入切面代理，在实际开发中，非常多的Bean每个都配置ProxyFactoryBean开发维护量巨大。
			
			自动创建代理(*****基于后处理Bean[ org.springframework.beans.factory.config.BeanPostProcessor ].在Bean创建的过程中完成的增强.生成Bean就是代理.【具体详情可参照
		 Bean的生命周期 （spring-base-01 ：com.baihoo.spring4.demo4）】)
		 
		 	BeanNameAutoProxyCreator 根据Bean名称创建代理 
			DefaultAdvisorAutoProxyCreator 根据Advisor本身包含信息创建代理
					* AnnotationAwareAspectJAutoProxyCreator 基于Bean中的AspectJ 注解进行自动代理
		 	
		 

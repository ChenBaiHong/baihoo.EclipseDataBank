数据库事务的定义 
		数据库事务(Database Transaction)，是指作为单个逻辑工作单元执行的一系列操作。一个逻辑工作单元要成为事务，必须满足所谓的ACID(原子性、一致性、隔离性和持久性)属性。 
		● 原子性(atomic)，事务必须是原子工作单元；对于其数据修改，要么全都执行，要么全都不执行 
		● 一致性(consistent)，事务在完成时，必须使所有的数据都保持一致状态。 
		● 隔离性(insulation)，由并发事务所作的修改必须与任何其它并发事务所作的修改隔离。 
		● 持久性(Duration)，事务完成之后，它对于系统的影响是永久性的。 

Hibernate事务隔离级别：（不同数据库对应默认的级别不一样） 
		为了解决数据库事务并发运行时的各种问题数据库系统提供四种事务隔离级别，在Hibernate的配置文件中可以显示的配置数据库事务隔离级别。每一个隔离级别用一个整数表示： 
		● Serializable 串行化（8）二进制值0001 
		● Repeatable Read 可重复读（4）二进制值0010 MySql默认隔离级别 
		● Read Commited 可读已提交（2）二进制值0100 Oracle默认级别 
		● Read Uncommited 可读未提交（1）二进制值1000 
		在hibernate.cfg.xml中使用hibernate.connection.isolation参数配置数据库事务隔离级别。 

Hibernate对数据的锁机制： 
		Hibernate可以利用Query或者Criteria的setLockMode()方法来设定要锁定的表或列(Row)及其锁定模式： 
		●LockMode.NONE：
				无锁机制；在事务结束时，所有的对象都切换到该模式上来。与session相关联的对象通过调用update()或者saveOrUpdate()脱离该模式 
		●LockMode.WRITE：
				当更新或者插入一行记录的时候，锁定级别自动设置为LockMode.WRITE 
		●LockMode.READ:
				当Hibernate在“可重复读”或者是“序列化”数据库隔离级别下读取数据的时候，锁定模式自动设置为LockMode.READ。这种模式也可以通过用户显式指定进行设置。 
		●LockMode.UPGRADE:
				利用数据库的for update子句加锁 
		●LockMode.UPGRADE_NOWAIT:
				利用oracle的特定实现for update nowait子句实现 
				
使用乐观锁解决事务并发问题 
			相对悲观锁而言，乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长
		事务而言，这样的开销往往无法承受。乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（Version）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数
		据库表的版本解决方案中，一般是通过为数据库表增加一个"version"字段来实现。 
		　　乐观锁的工作原理：读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号
		大于数据库表当前版本号，则予以更新，否则认为是过期数据。 
				Hibernate为乐观锁提供了3种实现： 
				●基于version 
				●基于timestamp 
				●为遗留项目添加添加乐观锁 
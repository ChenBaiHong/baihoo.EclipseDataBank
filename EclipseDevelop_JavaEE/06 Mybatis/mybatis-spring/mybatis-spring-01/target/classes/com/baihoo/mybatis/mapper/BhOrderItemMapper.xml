<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<!-- 
	namespace 命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao层的方式，使用namespace有特殊的作用
	mapper 代理开发时将namespace指定为mapper接口的全限定名
	 -->
<mapper namespace="com.baihoo.mybatis.mapper.BhOrderItemMapper">
	<!-- ======================================动态SQL与SQL片段的定义======================================== -->
	
	<!-- //======================================动态SQL与SQL片段的定义======================================== -->

	<!-- ========================================resultMa定义)============================================== -->
	<!-- 
	建立数据表查询出的字段与dto(Data transfer Object)类之间的映射关系
	 -->
	<resultMap type="BhOrderItem" id="BhOrderItemResultMap">
		<id column="id" property="id" />
		<result column="buy_num" property="buyNum" />
		<result column="price" property="price" />
		<result column="subtotal" property="subtotal" />
		<result column="p_id" property="pId" />
		<result column="o_id" property="oId" />
		<result column="create_time" property="createTime" />
		<result column="update_time" property="updateTime" />
	</resultMap>
	<!-- 
	建立数据表查询出的字段与dto(Data transfer Object)类之间的映射关系
	
		参考： <select id="findOrderItemDetail" ...>
	 -->
	<resultMap type="BhOrderItemDto" id="BhOrderItemDtoResultMap">
		<id column="id" property="id" />
		<result column="buy_num" property="buyNum" />
		<result column="price" property="price" />
		<result column="subtotal" property="subtotal" />
		<result column="create_time" property="createTime" />
		<result column="update_time" property="updateTime" />
		<!-- 下边完成关联信息的映射 == 订单项关联的产品
		association：用于对关联信息映射到单个pojo
		property：要将关联信息映射到BhCateDto的哪个属性中
		javaType：关联信息映射到BhCateDto的属性的类型，是BhCateDto的类型
		 -->
		<association property="bhProductDto"  javaType="BhProductDto">
			<id column="p_id" property="id" />
			<result column="p_name" property="name" />
			<result column="P_price" property="price" />
			<result column="p_create_time" property="createTime" />
			<result column="p_update_time" property="updateTime" />
			<!-- 产品关联的分类 -->
			<association property="bhCateDto" javaType="BhCateDto">
				 <result column="c_id" property="id"/>
				 <result column="c_name" property="name"/>
				 <result column="c_layer" property="layer"/>
				 <result column="c_create_time" property="createTime" />
				 <result column="c_update_time" property="updateTime" />
			</association>
			<!-- 产品关联的品牌 -->
			<association property="bhBrandDto" javaType="BhBrandDto">
				 <result column="b_id" property="id"/>
				 <result column="b_name" property="name"/>
				 <result column="b_description" property="description"/>
				 <result column="b_create_time" property="createTime" />
				 <result column="b_update_time" property="updateTime" />
			</association>
		</association>
	</resultMap>
	<!-- //========================================resultMa定义)============================================== -->

	<!-- ========================================对象包装器查询============================================== -->
	
	<!-- //========================================对象包装器查询============================================== -->

	 <!-- =========================================SQL语句查询============================================= -->
	 <!-- 
	 复杂一对一查询：
	 查询某个订单项的详细信息（包括是那个产品项并且是那个分类下属于那个品牌的）
	  -->
	 <select id="findOrderItemDetail" parameterType="BhOrderItemDto" resultMap="BhOrderItemDtoResultMap">
			SELECT
					 oi.id,
					 oi.buy_num,
					 oi.price,
					 oi.subtotal,
					 oi.create_time,
					 oi.update_time,
					 p.id p_id,
					 p.name as p_name,
					 p.price as p_price,
					 p.create_time p_create_time,
					 p.update_time p_update_time,
					 c.id c_id,
					 c.name c_name,
					 c.layer c_layer,
					 c.update_time c_update_time,
					 c.create_time c_create_time,
					 b.id b_id,
					 b.name b_name,
					 b.description b_description,
					 b.create_time b_create_time,
					 b.update_time b_update_time
			FROM
				bh_order_item oi,
				bh_product p,
				bh_cate c,
				bh_brand b
			WHERE
				oi.p_id = p.id
			AND p.c_id = c.id
			AND p.b_id = b.id
	 </select>
	<!--  通过订单ID查询某个订单下的订单项 -->
	 <select id="findByOid" parameterType="String" resultMap="BhOrderItemDtoResultMap">
			SELECT
					 oi.id,
					 oi.buy_num,
					 oi.price,
					 oi.subtotal,
					 oi.create_time,
					 oi.update_time,
					 p.id p_id,
					 p.name as p_name,
					 p.price as p_price,
					 p.create_time p_create_time,
					 p.update_time p_update_time,
					 c.id c_id,
					 c.name c_name,
					 c.layer c_layer,
					 c.update_time c_update_time,
					 c.create_time c_create_time,
					 b.id b_id,
					 b.name b_name,
					 b.description b_description,
					 b.create_time b_create_time,
					 b.update_time b_update_time
			FROM
				bh_order_item oi,
				bh_product p,
				bh_cate c,
				bh_brand b
			WHERE
				oi.p_id = p.id
			AND p.c_id = c.id
			AND p.b_id = b.id
			AND oi.o_id = #{oId}
	 </select>
	 <!-- //=========================================SQL语句查询============================================= -->
	 
	 <!-- =========================================SQL语句插入============================================= -->
	 <insert id="insertBhOrderItem" parameterType="BhOrderItem">
	 	<!-- mySQL返回主键id -->
	 	<selectKey keyProperty="id" order="AFTER" resultType="String">
	 		SELECT LAST_INSERT_ID()
	 	</selectKey>
	 	INSERT INTO bh_order_item (
			id,
			buy_num,
			price,
			subtotal,
			p_id,
			o_id
		)
		VALUES
			(
				#{id}, #{buyNum}, #{price} , #{subtotal} , #{pId}, #{oId}
			)
	 </insert>
	 <!-- //=========================================SQL语句插入============================================= -->
	 
	 <!-- =========================================SQL语句更新============================================= -->
	 <!-- 
	 动态更新的sql语句
	 这里，SET元素将动态地设置SET关键字，但无法动态去除后缀逗号。
	 因此我们可用trim标签，进行前后缀动态修剪
	  -->
	<update id="updateBhOrderItem" parameterType="BhOrderItem">
		UPDATE bh_order_item
		<!-- 
		suffixoverride：去掉最后一个逗号
　　	suffix：后缀
		如若buyNum和password不为null，那么打印的SQL为：
			UPDATE bh_order_item SET buyNum='xx' , price='xx'   where id='x'
		 -->
		<trim prefix="SET" suffixOverrides="," suffix=" where id = #{id} ">
			<if test="buyNum != null and buyNum !='' ">
				buy_num=#{buyNum},
			</if>
			<if test="price != null ">
				price=#{price},
			</if>
			<if test="subtotal != null">
				subtotal=#{subtotal},
			</if>
			<if test="pId != null and pId !='' ">
				p_id=#{pId},
			</if>
			<if test="oId != null and oId !='' ">
				o_id=#{oId},
			</if>
		</trim>
	</update>
	 <!-- //=========================================SQL语句更新============================================= -->
	 
	 <!-- =========================================SQL语句删除============================================= -->
	<delete id="deleteBhOrderItem" parameterType="BhOrderItem">
		DELETE FROM bh_order_item
		<!-- 
		prefix：前缀　
　　	prefixoverride：去掉第一个AND或者是OR
		如若username和subtotal不为null，那么打印的SQL为：
			DELETE FROM bh_order_item WHERE username='xx' AND subtotal='xx' 
		 -->
		<trim prefix="WHERE" prefixOverrides="AND | OR">
			<if test="id != null and id !='' ">
				AND id=#{id}
			</if>
			<if test="buyNum != null and buyNum !='' ">
				AND buy_num=#{buyNum}
			</if>
			<if test="price != null and price !='' ">
				AND price=#{price}
			</if>
			<if test="subtotal != null and subtotal !='' ">
				AND subtotal=#{subtotal}
			</if>
			<if test="pId != null and pId !='' ">
				AND p_id=#{pId}
			</if>
			<if test="sex != null and sex !='' ">
				AND o_id=#{oId}
			</if>
		</trim>
	</delete>
	 <!-- //=========================================SQL语句删除============================================= -->	 

</mapper>
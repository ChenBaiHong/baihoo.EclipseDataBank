
《-- ================================================================================== --》
1、使用resultMap完成高级映射(重点)
	商品订单数据模型（一对一、一对多、多对多）
	
《-- ================================================================================== --》	
2、延迟加载
		2.1、使用延迟加载意义
			在进行数据查询时，为了提高数据库查询性能，尽量使用单表查询，因为单表查询比多表关联查询速度要快。

			如果查询单表就可以满足需求，一开始先查询单表，当需要关联信息时，再关联查询，当需要关联信息再查询这个叫延迟加载。

			mybatis中resultMap提供延迟加载功能，通过resultMap配置延迟加载。

		2.2、配置mybatis支持延迟加载 
			——————————————————————————————————————————————————————————
			 |  设置项									| 描述																															| 允许值	 			|默认值		|
			——————————————————————————————————————————————————————————
			 |  lazyLoadingEnabled			| 全局性设置懒加载。如果设为‘false’，则所有相关联的都会被初始化加载。							   	|	true /  false	|	false		|
			——————————————————————————————————————————————————————————
			 |  aggressiveLazyLoading		| 当设置为‘true’的时候，懒加载的对象可能被任何懒属性全部加载。否则，每个属性都按需加载。	|	true / false	|	true		|
			——————————————————————————————————————————————————————————
			
			在SqlMapConfig.xml中配置延迟加载的参数：
				<!-- 全局参数配置 -->
				<settings>
					<!-- 延迟加载总开关 -->
					<setting name="lazyLoadingEnabled" value="true"/>
					<!-- 设置按需加载 -->
					<setting name="aggressiveLazyLoading" value="false"/>
				</settings>		
				
		2.3、延迟加载实现
			需求：
				询订单及用户的信息，一对一查询。参考：/mybatis-base-02/src/main/java/com/baihoo/mybatis/mapper/BhOrdersMapper.xml
					刚开始只查询订单信息
					当需要用户时调用 Orders类中的getUser()方法执行延迟加载 ，向数据库发出sql
			
		
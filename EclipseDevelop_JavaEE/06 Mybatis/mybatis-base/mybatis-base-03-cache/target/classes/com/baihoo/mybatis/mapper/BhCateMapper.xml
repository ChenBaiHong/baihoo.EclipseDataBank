<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<!-- 
	namespace 命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao层的方式，使用namespace有特殊的作用
	mapper 代理开发时将namespace指定为mapper接口的全限定名
	 -->
<mapper namespace="com.baihoo.mybatis.mapper.BhCateMapper">
	<!-- ======================================动态SQL与SQL片段的定义======================================== -->
	
	<!-- //======================================动态SQL与SQL片段的定义======================================== -->

	<!-- ========================================resultMa定义============================================== -->
	<!-- 
	建立数据表查询出的字段与pojo类之间的映射关系
	 -->

	<resultMap type="BhCate" id="BhCateResultMap">
		<id column="id" property="id" />
		<result column="p_Id" property="pId" />
		<result column="t_id" property="tId" />
		<result column="name" property="name" />
		<result column="layer" property="layer" />
		<result column="update_time" property="updateTime" />
		<result column="create_time" property="createTime" />
	</resultMap>
	<!-- 
	建立数据表查询出的字段与dto(Data transfer Object)类之间的映射关系
	 -->
	<resultMap type="BhCateDto" id="BhCateDtoResultMap">
		<id column="id" property="id"/>
		<result column="name" property="name"/>
		<result column="layer" property="layer"/>
		<result column="update_time" property="updateTime"/>
		<result column="create_time" property="createTime"/>
		<!-- 下边完成关联信息的映射
		association：用于对关联信息映射到单个pojo
		property：要将关联信息映射到BhCateDto的哪个属性中
		javaType：关联信息映射到BhCateDto的属性的类型，是BhCateDto的类型
		 -->
		<association property="parentCateDto" javaType="BhCateDto">
			<id column="id" property="id" />
			<result column="name" property="name" />
			<result column="layer" property="layer" />
			<result column="update_time" property="updateTime" />
			<result column="create_time" property="createTime" />
		</association>
		<association property="topCateDto" javaType="BhCateDto">
			<id column="id" property="id" />
			<result column="name" property="name" />
			<result column="layer" property="layer" />
			<result column="update_time" property="updateTime" />
			<result column="create_time" property="createTime" />
		</association>
	</resultMap>
	<!-- //========================================resultMa定义)============================================== -->

	<!-- ========================================对象包装器查询============================================== -->
	
	<!-- //========================================对象包装器查询============================================== -->

	 <!-- =========================================SQL语句查询============================================= -->
	 
	 <!-- //=========================================SQL语句查询============================================= -->
	 
	 <!-- =========================================SQL语句插入============================================= -->
	 <insert id="insertBhCate" parameterType="BhCate">
	 	<!-- mySQL返回主键id -->
	 	<selectKey keyProperty="id" order="AFTER" resultType="String">
	 		SELECT LAST_INSERT_ID()
	 	</selectKey>
	 	INSERT INTO bh_cate (
			id,
			p_Id,
			t_id,
			name,
			layer
		)
		VALUES
			(
				#{id}, #{pId}, #{tId} , #{name} , #{layer}
			)
	 </insert>
	 <!-- //=========================================SQL语句插入============================================= -->
	 
	 <!-- =========================================SQL语句更新============================================= -->
	 <!-- 
	 动态更新的sql语句
	 这里，SET元素将动态地设置SET关键字，但无法动态去除后缀逗号。
	 因此我们可用trim标签，进行前后缀动态修剪
	  -->
	<update id="updateBhCate" parameterType="BhCate">
		UPDATE bh_cate
		<!-- 
		suffixoverride：去掉最后一个逗号
　　	suffix：后缀
		如若name和layer不为null，那么打印的SQL为：
			UPDATE bh_cate SET name='xx' , layer='xx'   where id='x'
		 -->
		<trim prefix="SET" suffixOverrides="," suffix=" where id = #{id} ">
			<if test="pId != null and pId !='' ">
				p_Id=#{pId},
			</if>
			<if test="tId != null and tId !='' ">
				t_id=#{tId},
			</if>
			<if test="name != null and name !='' ">
				name=#{name},
			</if>
			<if test="layer != null and layer !='' ">
				layer=#{layer},
			</if>
		</trim>
	</update>
	 <!-- //=========================================SQL语句更新============================================= -->
	 
	 <!-- =========================================SQL语句删除============================================= -->
	<delete id="deleteBhCate" parameterType="BhCate">
		DELETE FROM bh_cate
		<!-- 
		prefix：前缀　
　　	prefixoverride：去掉第一个AND或者是OR
		如若name和layer不为null，那么打印的SQL为：
			DELETE FROM bh_cate WHERE name='xx' AND layer='xx' 
		 -->
		<trim prefix="WHERE" prefixOverrides="AND | OR">
			<if test="name != null and name !='' ">
				AND name=#{name}
			</if>
			<if test="password != null and password !='' ">
				AND p_Id=#{pId}
			</if>
			<if test="address != null and address !='' ">
				AND t_id=#{tId}
			</if>
			<if test="layer != null and layer !='' ">
				AND layer=#{layer}
			</if>
		</trim>
	</delete>
	 <!-- //=========================================SQL语句删除============================================= -->	 

</mapper>